import{resolve,dirname as _0x3d00ec}from'path';import _0x1ebef8,{existsSync,readFileSync}from'fs';const {promises:fs}=_0x1ebef8;class Database{constructor(_0x1257b8,..._0x4af7a4){this['file']=resolve(_0x1257b8),this['logger']=console,this['_load'](),this['_jsonargs']=_0x4af7a4,this['_state']=![],this['_queue']=[],this['_interval']=setInterval(async()=>{!this['_state']&&this['_queue']&&this['_queue'][0x0]&&(this['_state']=!![],await this[this['_queue']['shift']()]()['catch'](this['logger']['error']),this['_state']=![]);},0x3e8);}get['data'](){return this['_data'];}set['data'](_0x351e86){this['_data']=_0x351e86,this['save']();}['load'](){this['_queue']['push']('_load');}['save'](){this['_queue']['push']('_save');}['_load'](){try{return this['_data']=existsSync(this['file'])?JSON['parse'](readFileSync(this['file'])):{};}catch(_0x10632b){return this['logger']['error'](_0x10632b),this['_data']={};}}async['_save'](){const _0x51264a=_0x3d00ec(this['file']);if(!existsSync(_0x51264a))await fs['mkdir'](_0x51264a,{'recursive':!![]});return await fs['writeFile'](this['file'],JSON['stringify'](this['_data'],...this['_jsonargs'])),this['file'];}}export default Database;